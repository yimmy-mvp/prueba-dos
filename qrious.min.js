/*!
 * QRious v4.0.2
 * Copyright (C) 2017 Alasdair Mercer
 * @license MIT
 */
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.QRious = factory());
}(this, (function() {
  'use strict';

  var Element = (function() {
    function Element(tagName, namespace) {
      this._el = namespace ? document.createElementNS(namespace, tagName) : document.createElement(tagName);
    }
    Element.prototype.get = function() {
      return this._el;
    };
    Element.prototype.setAttributes = function(attributes) {
      for (var name in attributes) {
        if (attributes.hasOwnProperty(name)) {
          this._el.setAttribute(name, attributes[name]);
        }
      }
    };
    Element.prototype.setStyle = function(name, value, priority) {
      this._el.style.setProperty(name, value, priority);
    };
    return Element;
  }());

  var Renderer = (function() {
    function Renderer(element, level, version) {
      this._element = element;
      this._level = level;
      this._version = version;
    }
    Renderer.prototype.draw = function(frame) {
      throw new Error('The draw method must be implemented by subclasses of Renderer');
    };
    Renderer.prototype.getElement = function() {
      return this._element;
    };
    return Renderer;
  }());

  var CanvasRenderer = (function(superClass) {
    function CanvasRenderer(element, level, version, size) {
      superClass.call(this, element, level, version);
      this._size = size;
      this._canvas = new Element('canvas').get();
      this._canvas.width = this._size;
      this._canvas.height = this._size;
      this._element.appendChild(this._canvas);
      this._context = this._canvas.getContext('2d');
    }
    CanvasRenderer.prototype.draw = function(frame) {
      var length = this._size / frame.moduleCount;
      var data = frame.getData();
      for (var row = 0; row < frame.moduleCount; row++) {
        for (var col = 0; col < frame.moduleCount; col++) {
          this._context.fillStyle = data[row * frame.moduleCount + col] ? '#000' : '#fff';
          this._context.fillRect(col * length, row * length, length, length);
        }
      }
    };
    return CanvasRenderer;
  }(Renderer));

  function QRious(options) {
    options = options || {};
    var element = new Element('div').get();
    var size = options.size || 100;
    var renderer = new CanvasRenderer(element, options.level || 'L', options.version || 1, size);
    this._frame = this.createFrame(options.value || '', options.level || 'L', options.version || 1);
    this._element = element;
    this._renderer = renderer;
    this.setSize(size);
    this.setValue(options.value || '');
  }

  QRious.prototype.createFrame = function(value, level, version) {
    var qr = qrcode(version, level);
    qr.addData(value);
    qr.make();
    return qr;
  };

  QRious.prototype.setSize = function(size) {
    this._renderer._size = size;
    this._element.style.width = size + 'px';
    this._element.style.height = size + 'px';
  };

  QRious.prototype.setValue = function(value) {
    this._renderer.draw(this.createFrame(value, this._renderer._level, this._renderer._version));
  };

  QRious.prototype.getElement = function() {
    return this._element;
  };

  return QRious;
})));
